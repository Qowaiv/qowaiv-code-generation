using System.IO;
using System.Text;
using System.Xml.Linq;
using Qowaiv.CodeGeneration;
using Qowaiv.OpenApi.Generation;

namespace Qowaiv.OpenApi.IO;

public sealed class CSharpWriter
{
    /// <summary>UTF-8 BOM.</summary>
    public static readonly Encoding Encoding = new UTF8Encoding(true);

    private readonly CSharpWriterSettings Settings;
    private readonly TextWriter Writer;
    private int Indentation;

    public CSharpWriter(CSharpWriterSettings? settings, TextWriter writer)
    {
        Settings = settings ?? new();
        Writer = Guard.NotNull(writer, nameof(writer));
    }

    /// <summary>Writes a character to the code file.</summary>
    public CSharpWriter Write(char ch)
    {
        Writer.Write(ch);
        return this;
    }

    /// <summary>Writes code (represented as a string) to the code file.</summary>
    public CSharpWriter Write(string? code)
    {
        Writer.Write(code);
        return this;
    }

    public CSharpWriter Write(IEnumerable<Action<CSharpWriter>> writes, Action<CSharpWriter> split)
    {
        Guard.NotNull(writes, nameof(writes));
        Guard.NotNull(split, nameof(split));

        var first = true;

        foreach(var write in writes)
        {
            if (!first) split(this);
            write(this);
            first = false;
        }

        return this;
    }

    public CSharpWriter Write(Type type, bool attribute = false) => this;
        //=> type.Display(Settings.Globals) is var display && attribute && display.EndsWith("Attribute")
        //? Write(display[..^9])
        //: Write(display);

    /// <summary>Writes an auto-generated header to the code file.</summary>
    public CSharpWriter AutoGeneratedHeader()
        => Line("// ------------------------------------------------------------------------------")
        .Line("// <auto-generated>")
        .Line("//     This code was generated by a tool.")
        .Line("//")
        .Line("//     Changes to this file may cause incorrect behavior and will be lost if")
        .Line("//     the code is regenerated.")
        .Line("// </auto-generated>")
        .Line("// ------------------------------------------------------------------------------")
        .Line();

    public CSharpWriter Literal(string? str)
        => str is null
        ? Write("null")
        : Write($@"""{str}""");

    /// <summary>Writes a file-scoped namespace declaration to the code file.</summary>
    public CSharpWriter NamespaceDeclration(Namespace @namespace) => Line($"namespace {@namespace};").Line();

    public CSharpWriter Documentation(string type, string? text, bool literal = false)
    {
        var lines = (text ?? string.Empty)
            .Replace("\r", "")
            .Split('\n', StringSplitOptions.TrimEntries)
            .ToList();

        for (var i = lines.Count - 1; i >= 0; i--)
        {
            if (!string.IsNullOrEmpty(lines[i])) break;
            else lines.RemoveAt(i);
        }

        if (lines.Count == 1)
        {
            Indent().Line($"/// <{type}>{(literal ? lines[0] : new XText(lines[0]))}</{type}>");
        }
        else if (lines.Any())
        {
            Indent().Line($"/// <{type}>");
            foreach (var line in lines)
            {
                Indent().Line($"/// {(literal ? line : new XText(line))}");
            }
            Indent().Line($"/// </{type}>");
        }
        return this;
    }

    /// <summary>Indents the current line of the code file.</summary>
    public CSharpWriter Indent()
    {
        foreach (var code in Enumerable.Repeat(Settings.Indentation, Indentation))
        {
            Write(code);
        }
        return this;
    }

    /// <summary>Writes the line including an ending to the code file.</summary>
    public CSharpWriter Line(string? line = null) => Write(line).Write(Settings.NewLine);

    /// <summary>Writes the character including an ending to the code file.</summary>
    public CSharpWriter Line(char ch) => Write(ch).Write(Settings.NewLine);

    /// <summary>Writes a code block (`{ ... }`).</summary>
    public IDisposable CodeBlock(string markers = "{}")
    {
        Line(markers[0]);
        Indentation++;
        return new ScopedCodeBlock(this, markers[1]);
    }

    private sealed record ScopedCodeBlock(CSharpWriter Writer, char Close) : IDisposable
    {
        public void Dispose()
        {
            Writer.Indentation--;
            Writer.Indent().Line(Close);
        }
    }
}
