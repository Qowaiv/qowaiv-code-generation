using Qowaiv.OpenApi.IO;

namespace Qowaiv.OpenApi.Generation;

public partial class CodeGenerator
{
    private void Declaration(CodeModel model, CSharpWriter writer)
    {
        writer
            .AutoGeneratedHeader()
            .Line("#nullable enable")
            .Line()
            .NamespaceDeclration(model.Type.Namespace);

        foreach (var decorator in Decorators) decorator.Declaration(writer, model);
        using (writer.Line(Declaration(model.Type)).CodeBlock())
        {
            Constructor(model, writer);

            writer.Write(
                writes: model.Select(WriteProperty),
                split: writer => writer.Line());
        }

        string Declaration(CodeType type)
            => Settings.ModelType switch
            {
                ModelType.Record => $"public partial record {model.Type.Name}",
                ModelType.Class => $"public partial class {model.Type.Name}",
                _ => throw new NotSupportedException($"Model type '{Settings.ModelType}' is not supported."),
            };

        Action<CSharpWriter> WriteProperty(CodeProperty property) => writer => Property(property, writer);
    }

    private void Constructor(CodeModel model, CSharpWriter writer)
    {
        if (Settings.PropertyAccess != PropertyAccess.GetOnly || !model.Any()) return;

        foreach (var decorator in Decorators) decorator.Constructor(writer, model);

        using (writer.Indent().Line($"public {model.Type.Name}").CodeBlock("()"))
        {
            writer
                .Indent()
                .Write(
                    writes: model.Select(WriteArgument),
                    split: writer => writer.Line(',').Indent());
        }

        using (writer.Indent().CodeBlock())
        {
            foreach (var prop in model)
            {
                writer.Indent().Line($"this.{prop.Name} = {prop.Name};");
            }
        }

        Action<CSharpWriter> WriteArgument(CodeProperty property) => writer => writer.Write(property.Type).Write($" {property.Name}");
    }

    private void Property(CodeProperty property, CSharpWriter writer)
    {
        foreach (var decorator in Decorators) decorator.Property(writer, property);

        writer.Indent()
            .Write("public ")
            .Write(property.Type)
            .Write(property.Schema.Nullable ? "?" : "")
            .Write($" {property.Name} ");

        switch (Settings.PropertyAccess)
        {
            case PropertyAccess.PublicSet: writer.Line("{ get; set; }"); break;
            case PropertyAccess.InternalSet: writer.Line("{ get; internal set; }"); break;
            case PropertyAccess.GetOnly: writer.Line("{ get; }"); break;
            case PropertyAccess.InitOnly: writer.Line("{ get; init; }"); break;
            default: throw new NotSupportedException($"Property access '{Settings.PropertyAccess}' is not supported.");
        }
    }
}
