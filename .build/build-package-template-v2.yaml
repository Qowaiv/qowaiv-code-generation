trigger: none

parameters:
- name: app
  type: string
  default: StubsService
- name: sonarCloudProjectKey
  type: string
- name: major
  type: number
  default: 1  
- name: minor
  type: number
  default: 0

# Secrets Scan
- name: runSecretsScan
  type: boolean
  default: true
- name: failBuildOnFoundSecrets
  type: boolean
  default: false
- name: secretsScanLocation
  type: string
  default: '$(Build.SourcesDirectory)'
- name: secretsScanConfigFile
  type: string
  default: '$(Build.SourcesDirectory)/.build/gitleaks.toml'
- name: secretsScanMode
  type: string
  default: 'nogit'
- name: secretsScanLogOptions
  type: string
  default: ''
- name: secrectsScanReportFormat
  type: string
  default: 'sarif'
- name: secretsScanReportName
  type: string
  default: 'Gitleaks_secrets'
- name: secretsScanRedact
  type: boolean
  default: true
- name: secretsScanUploadResults
  type: boolean
  default: true
- name: secretsScanVerbose
  type: boolean
  default: true
- name: secretsScanFailOnExecutionError
  type: boolean
  default: false

variables:
- name: version
  value: ""

stages:
- stage: setup
  displayName: Setup Pipeline & Scan for leaked secrets

  jobs:
  - job: list
    displayName: Setup
    steps:

      - task: PowerShell@2
        displayName: 'Create version number'
        name: 'CreateVersionNumber'
        inputs:
          targetType: 'inline'
          script: |
              Write-Host "##vso[build.updatebuildnumber]${{ parameters.app }} - ${{ parameters.major }}.${{ parameters.minor }}.$(Build.BuildId)"

      - bash: echo "##vso[task.setvariable variable=version]${{ parameters.major }}.${{ parameters.minor }}.$(Build.BuildId)"
        displayName: Create Build Version Number
        
      # Scan for leaked secrets
      - task: Gitleaks@2
        displayName: 'Scan for leaked secrets for ${{ parameters.app }}'
        condition: and( eq( ${{ parameters.runSecretsScan }}, 'true' ), succeeded() )
        inputs:
          scanlocation: ${{ parameters.secretsScanLocation }}
          configtype: 'custom'
          scanmode: ${{ parameters.secretsScanMode }}
          logoptions: ${{ parameters.secretsScanLogOptions }}
          redact: ${{ parameters.secretsScanRedact }}
          taskfail: ${{ parameters.failBuildOnFoundSecrets }}
          uploadresults: ${{ parameters.secretsScanUploadResults }}
          reportformat: ${{ parameters.secrectsScanReportFormat }}
          reportname: ${{ parameters.secretsScanReportName }}
          verbose: ${{ parameters.secretsScanVerbose }}
          taskfailonexecutionerror: ${{ parameters.secretsScanFailOnExecutionError }}
          configFile: ${{ parameters.secretsScanConfigFile }}
          version: '8.11.2'
          
- stage: build
  displayName: Build and Test source code, do SonarCloud scan.
  dependsOn: setup

  jobs:
  - job: list
    displayName: Build and Test
    steps:
      - task: UseDotNet@2
        displayName: Install .NET 9
        inputs:
          packageType: 'sdk'
          version: '9.x'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'restore'
          projects: '**/*.csproj'
        displayName: 'Restore Nuget Packages'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'build'
          projects: '**/*.csproj'
          arguments: '--no-restore --configuration Release'
        displayName: 'Build solution'

      - task: DotNetCoreCLI@2
        inputs:
          command: 'test'
          projects: '**/*.csproj'
          arguments: '--no-build --no-restore --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --collect "Code Coverage"'
        displayName: 'Run unit tests'

      - ${{ if and(ne(variables['Build.Reason'], 'PullRequest'),eq(variables['Build.SourceBranchName'], 'main')) }}:
      
          - task: DotNetCoreCLI@2
            displayName: 'Create NuGet package'
            inputs:
              command: 'pack'
              packagesToPack: 'src/**/*.csproj'
              arguments: '--no-restore'
              versioningScheme: 'off'
      
          - task: NuGetCommand@2
            displayName: 'Publish to TJIP-Components NuGet feed'
            inputs:
              command: 'push'
              allowPackageConflicts: true
              packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: 'Tjip-Components'
