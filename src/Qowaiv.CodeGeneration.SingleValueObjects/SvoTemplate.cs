using Qowaiv.CodeGeneration;
using Qowaiv.CodeGeneration.Syntax;

namespace Qowaiv.SingleValueObjects;

public sealed class SvoTemplate : Code
{
    private readonly CodeSnippet Snippet;

    /// <summary>Creates new instance of the <see cref="SvoTemplate"/> class.</summary>
    private SvoTemplate(CodeSnippet snippet) => Snippet = snippet;

    /// <inheritdoc />
    public void WriteTo(CSharpWriter writer)
        => Guard.NotNull(writer)
        .Write(Headers.AutoGenerated([]))
        .Write(Snippet);

    /// <inheritdoc />
    [Pure]
    public override string ToString() => this.Stringify();

    [Pure]
    public SvoTemplate Transform(SvoArguments arguments)
    {
        Guard.NotNull(arguments);

        return new(Snippet
            .Transform(line => ReplacePlaceholders(line, arguments))
            .Transform(Constants(arguments.Features)));

        static string ReplacePlaceholders(string line, SvoArguments arguments)
            => line
            .Replace("@TSvo", arguments.Name)
            .Replace("@FullName", arguments.FullName)
            .Replace("@Namespace", arguments.Namespace)
            .Replace("@type_n", arguments.Underlying.IsValueType
                ? arguments.Underlying.ToCSharpString(false)
                : arguments.Underlying.ToCSharpString(false) + "?")
            .Replace("@type", arguments.Underlying.ToCSharpString(false))
            .Replace("@FormatExceptionMessage", arguments.FormatExceptionMessage);

        static IReadOnlyCollection<Constant> Constants(SvoFeatures features)
        {
            var constants = new List<Constant>
            {
                (features & SvoFeatures.Structure) != default
                ? "Structure"
                : "NotStructure",
            };

            foreach (var flag in Enum.GetValues<SvoFeatures>().Where(f => f != SvoFeatures.Structure))
            {
                if (features.HasFlag(flag))
                {
                    constants.Add(flag.ToString());
                }
                else
                {
                    constants.Add($"Not{flag}");
                }
            }
            return constants;
        }
    }

    [Pure]
    public static SvoTemplate GeneratedCode { get; } = new SvoTemplate(new[]
    {
        Embedded("Structure"),
        Embedded("IEquatable"),
        Embedded("IComparable"),
        Embedded("IFormattable"),
        Embedded("ISerializable"),
        Embedded("IJsonSerializable"),
        Embedded("IXmlSerializable"),
        Embedded("Parsing"),
    }.Concat());

    [Pure]
    public static SvoTemplate Initial { get; } = new SvoTemplate(Embedded(nameof(Initial)));

    [Pure]
    public static SvoTemplate JsonConverter { get; } = new SvoTemplate(Embedded(nameof(JsonConverter)));

    [Pure]
    public static SvoTemplate Specs { get; } = new SvoTemplate(Embedded(nameof(Specs)));

    [Pure]
    private static CodeSnippet Embedded(string name)
    {
        var path = $"Qowaiv.CodeGeneration.SingleValueObjects.Snippets.{name}.cs";

        using var stream = typeof(SvoTemplate).Assembly.GetManifestResourceStream(path);

        return stream is { }
            ? CodeSnippet.Load(stream)
            : throw new ArgumentException($"The path '{path}' is not a stream.", nameof(name));
    }
}
