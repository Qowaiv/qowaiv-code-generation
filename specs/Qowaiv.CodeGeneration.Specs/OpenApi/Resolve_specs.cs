using Qowaiv;
using Qowaiv.CodeGeneration.IO;
using Qowaiv.CodeGeneration.OpenApi;
using Qowaiv.CodeGeneration.Syntax;
using System.IO;

namespace Open_API.Resolve_specs;

public class Generates
{
    private static readonly FileInfo PetShop_json = new("./OpenApi/Definitions/pet-shop.json");
    private static readonly FileInfo AllOf_json = new("./OpenApi/Definitions/all-of.json");
    private static readonly FileInfo DerivedTypes_yaml = new("./OpenApi/Definitions/derived-types.yaml");

    [Test]
    public void Compiling_code()
    {
        var result = OpenApiCode.Resolve(PetShop_json, new PetShopBoysResolver());

        var code = result.Should().BeValid().WithoutMessages().Value;

        var codeFileSettings = new CodeFileWriterSettings
        {
            RootDirectory = new("../../../../../specs/Qowaiv.CodeGeneration.Specs/Generated/PetShopBoys"),
            RootNamespace = "PetShopBoys",
            Headers = [new AutoGeneratedHeader([]), NullableHeader.Enable],
        };

        code.Save(codeFileSettings);
    }

    [Test]
    public void base_class_for_all_off()
    {
        var result = OpenApiCode.Resolve(AllOf_json, new OpenApiTypeResolver("AllOfExamples"));

        var code = result.Should().BeValid().WithoutMessages().Value;

        var codeFileSettings = new CodeFileWriterSettings
        {
            RootDirectory = new("../../../../../specs/Qowaiv.CodeGeneration.Specs/Generated/AllOfExamples"),
            RootNamespace = "AllOfExamples",
            Headers = [new AutoGeneratedHeader([]), NullableHeader.Enable],
        };

        var csSettings = new CSharpWriterSettings
        {
            GlobalUsings = [],
        };

        code.Save(codeFileSettings, csSettings);
    }

    [Test]
    public void derived_types()
    {
        var result = OpenApiCode.Resolve(DerivedTypes_yaml, new OpenApiTypeResolver("DerivedTypes"));

        var code = result.Should().BeValid().WithoutMessages().Value;

        var codeFileSettings = new CodeFileWriterSettings
        {
            RootDirectory = new("../../../../../specs/Qowaiv.CodeGeneration.Specs/Generated/DerivedTypes"),
            RootNamespace = "DerivedTypes",
            Headers = [new AutoGeneratedHeader([]), NullableHeader.Enable],
        };

        var csSettings = new CSharpWriterSettings
        {
            GlobalUsings = [],
        };

        code.Save(codeFileSettings, csSettings);
    }

    [Test]
    public void code_with_custom_types()
    {
        typeof(PetShopBoys.Address).GetProperty("Zip")!.PropertyType.Should().Be(typeof(PostalCode));
        typeof(PetShopBoys.User).GetProperty("Email")!.PropertyType.Should().Be(typeof(EmailAddress));
    }

    private sealed class PetShopBoysResolver()
        : OpenApiTypeResolver("PetShopBoys", new() { RequiredType = RequiredTypes.Nullabillity })
    {
        protected override Type? ResolveCustomization(ResolveOpenApiSchema schema) => schema.Path.Last switch
        {
            "zip" => typeof(PostalCode),
            "email" => typeof(EmailAddress),
            _ => null,
        };
    }
}
